rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

  match /users/{userId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(userId) {
  return isSignedIn() && request.auth.uid == userId;
  }
 

  allow get: if isOwner(userId);
  allow list: if false;
  allow create: if isOwner(userId);
  allow update: if isOwner(userId);
  allow delete: if isOwner(userId);
  }
 

  match /courses/{courseId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  allow get, list: if true;
  allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
  allow update: if isSignedIn() && request.auth.uid == resource.data.teacherId;
  allow delete: if isSignedIn() && request.auth.uid == resource.data.teacherId;
  }
 

  match /courses/{courseId}/enrollments/{enrollmentId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  allow get, list, create: if isSignedIn();
  allow update: if false;
  allow delete: if false;
  }
 

  match /courses/{courseId}/assignments/{assignmentId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isCourseTeacher(courseId) {
  return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid;
  }
 

  allow get, list: if true;
  allow create: if isCourseTeacher(courseId);
  allow update: if isCourseTeacher(courseId);
  allow delete: if isCourseTeacher(courseId);
  }
 

  match /users/{userId}/submissions/{submissionId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(userId) {
  return isSignedIn() && request.auth.uid == userId;
  }
 

  allow get: if isOwner(userId);
  allow list: if isOwner(userId);
  allow create: if isOwner(userId);
  allow update: if isOwner(userId);
  allow delete: if isOwner(userId);
  }
 

  match /grades/{gradeId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isSubmissionOwner(submissionId) {
  return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)/submissions/$(submissionId)).data.studentId == request.auth.uid;
  }
 

  function isTeacherOfSubmission(submissionId) {
  return isSignedIn() && get(/databases/$(database)/documents/submissions/$(submissionId)).data.teacherId == request.auth.uid;
  }
 

  allow get: if isSignedIn();
  allow list: if false;
  allow create: if isSignedIn();
  allow update: if isSignedIn();
  allow delete: if isSignedIn();
  }
 

  match /courses/{courseId}/discussions/{discussionId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(userId) {
  return isSignedIn() && request.auth.uid == userId;
  }
 

  allow get, list: if true;
  allow create: if isSignedIn();
  allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
  allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
  }
 

  match /courses/{courseId}/files/{fileId} {
  function isSignedIn() {
  return request.auth != null;
  }
 

  function isCourseTeacher(courseId) {
  return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.teacherId == request.auth.uid;
  }
 

  allow get, list: if true;
  allow create: if isCourseTeacher(courseId);
  allow update: if isCourseTeacher(courseId);
  allow delete: if isCourseTeacher(courseId);
  }
  }
 }